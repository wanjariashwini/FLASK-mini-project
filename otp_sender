from flask import Flask, jsonify, request
import json
from otp_data_service import *
import logging
from otp_app_msg import *

OTP = OTPOperation()

app = Flask(__name__)

log_file_name = "emp_app.log"
logging.basicConfig(filename=log_file_name,
                    filemode='a',
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.DEBUG)

logger = logging.getLogger('RestAPP')


@app.route('/sendOTP', methods=['POST'])
def send_OTP():
    logger.info("OTP operation started")
    if request:
        if request.authorization:
            auth = request.authorization
            print(auth)
            if auth and OTP.is_user_valid(auth):
                input_request = request.json
                if input_request:
                    mdn = input_request.get("mdn")
                    otp_method = input_request.get("otp_method")
                    if mdn and OTP.is_valid_mdn(mdn):
                        if otp_method in ("sms","email"):
                            user = auth.get("username")
                            record = OTP.send_otp(input_request, user)
                            print(record)
                            if record:
                                return jsonify(record)
                        else:
                            return create_response(FAILED, CHECK_OTP_METHOD)
                    else:
                        return create_response(FAILED, MDN_CHECK)

            else:
                return create_response(FAILED, INVALID_USER)
        else:
            return create_response(FAILED, USER_MISSING)
    else:
        return create_response(FAILED, USER_MISSING)


@app.route('/validateOTP', methods=['POST'])
def validate_OTP():
    logger.info("OTP validation started")
    if request:
        auth = request.authorization
        if auth and OTP.is_user_valid(auth):
            otp_data = request.json
            if otp_data:

                if OTP.otp_validate(otp_data):
                    status = OTP.otp_validate(otp_data)
                    if status:
                        return create_response(SUCCESS, VALID_OTP)
                    else:
                        return create_response(FAILED, OTP_NOT_VALID)
                else:
                    return create_response(FAILED, OTP_NOT_VALID)

            else:
                return create_response(FAILED, LIMIT_EXCEEDED)
        else:
            return create_response(FAILED, INVALID_USER)
    else:
        return create_response(FAILED, USER_MISSING)


if __name__ == '__main__':
    app.run(host="localhost", port="5000", debug=True)

"""
 http://localhost:5000/sendOTP
"""
